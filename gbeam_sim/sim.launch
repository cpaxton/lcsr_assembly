<launch>
  <!--

  For example, to launch with the Razer Hydra:
  roslaunch sim.launch hydra:=true

  Or, for the RVIZ UI with a moveable marker:
  roslaunch sim.launch rviz:=true marker:=true

  -->

  <arg name="gz" default="true"/>
  <arg name="gui" default="false"/>
  <arg name="hydra" default="false"/>
  <arg name="marker" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="paused" default="false"/>

  <arg name="rviz" default="false" doc="(bool) bring up rviz UI to see mates"/>
  <arg name="rviz_config" default="$(find gbeam_sim)/config/sim.rviz" doc="(string) rviz config file for user interface"/>

  <param name="use_sim_time" value="true"/>

  <param name="gbeam_soup_sdf"
    command="$(find xacro)/xacro.py '$(find gbeam_sim)/gbeam_soup.sdf.xacro'"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include if="$(arg gz)" file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find gbeam_sim)/gbeam_sim.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <node name="$(anon sdf_spawner)"
    pkg="gazebo_ros"
    type="spawn_model"
    respawn="false" output="screen"
    args="-b -sdf -model gbeam_soup -param gbeam_soup_sdf"/>

  <!-- Atom models for atom visualization -->
  <param name="gbeam_link_description" textfile="$(find gbeam_model)/urdf/gbeam_link.urdf"/>
  <param name="gbeam_node_description" textfile="$(find gbeam_model)/urdf/gbeam_node.urdf"/>
  <param name="hand_of_god_description" textfile="$(find gbeam_model)/urdf/hand_of_god.urdf"/>
  <node pkg="tf" type="static_transform_publisher" name="$(anon stp)" args="0 0 0 0 0 0 /hog_desired /hog 100"/>

  <group if="$(arg rviz)">
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(arg rviz_config)" />
  </group>

  <!-- Robot description for planning scene visualization -->
  <param name="ghost_robot_description" textfile="$(find gbeam_sim)/gazebo_planning_scene.urdf"/>
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param ghost_robot_description -urdf -model ghost" />

  <!-- Razer Hydra Hand of God -->
  <group if="$(arg hydra)">
    <node pkg="tf" type="static_transform_publisher" name="$(anon stp)" args="0.5 0 -0.01 0 0 0 /world /hydra_base 100"/>

    <include file="$(find razer_hydra)/launch/hydra.launch">
      <arg name="publish_tf" value="true"/>
    </include>

    <node pkg="gbeam_sim" type="tf_scaler.py" name="tf_scaler">
      <param name="parent_frame_id" value="world"/>
      <param name="unscaled_frame_id" value="hydra_right_grab"/>
      <param name="scaled_frame_id" value="hog_desired"/>
      <param name="scale" value="4.0"/>
    </node>
  </group>

  <!-- Interactive Marker Hand of God -->
  <group if="$(arg marker)">
    <node pkg="lcsr_tf_tools" type="interactive_transform_publisher" name="$(anon itp)" args="0.0 0.0 0.7 0 0 0 /world /hog_desired 10"/>
  </group>
</launch>

